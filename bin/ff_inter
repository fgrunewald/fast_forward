#!/usr/bin/env python3

# Copyright 2020 University of Groningen
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Main exe for computing interactions.
"""
import argparse
import MDAnalysis as mda
import vermouth.forcefield
import sys
import fast_forward
from fast_forward.itp_to_ag import itp_to_ag
from fast_forward.itp_parser_sub import read_itp, guess_interactions
from fast_forward.interaction_fit import InteractionFitter
from fast_forward.interactions_to_itp import itp_writer
from fast_forward.interaction_distribution import interaction_distribution
from fast_forward.interaction_plots import make_distribution_plot
from vermouth.file_writer import DeferredFileWriter

VERSION = 'fast_forward version {}'.format(fast_forward.__version__)

def __main__():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,)
    parser.add_argument('-f', type=str, dest="trajfile", help="trajectory file")
    parser.add_argument('-s', type=str, dest="tprfile", help="tpr file", default=None)
    parser.add_argument('-n', type=str, dest="ndx_file", help="index file")
    parser.add_argument('-pref', type=str, dest="prefix", help="common prefix to filename", default="")
    parser.add_argument('-i', type=str, dest="itp_files", help="itp file", nargs='*')
    parser.add_argument('-dists', default=False, action='store_true',
                        dest="distribution_data",
                        help="Save text files with time series and distribution data for interactions")
    parser.add_argument('-plots', default=False, action="store_true",
                        dest="plots", help="Save the fits of bonded interactions")
    parser.add_argument('-plot-data', default=False, action="store_true",
                        dest="plot_data", help="Save a pickle file containing the input data for the plots")
    parser.add_argument('-constraints', dest='constraint_convert', default=10000, type=int,
                        help="Force constant above which to convert bonds to constraints")
    parser.add_argument('-temperature', dest='temperature', type=int, default=310,
                        help='Temperature to use in Boltzmann inversion')
    parser.add_argument('-precision', dest='precision', default=3, type=int,
                        help='Precision of variables written to itp')
    parser.add_argument('-max-dihedral', dest='max_dihedral', type=int, default=10,
                        help='Maximum multiplicity of dihedral to try stacking during dihedral fitting')
    parser.add_argument('-dihedral-scaling', dest='dihedral_scaling', type=int, default=1e3,
                        help='Scale factor for strength of proper dihedral terms from fit to potential')
    parser.add_argument('-itp-only', default=False, action="store_true",
                        dest="itp_only", help="Use only interactions written into itp already, don't identify any more")

    args = parser.parse_args()

    # load trajectory
    if args.tprfile:
        u = mda.Universe(args.tprfile, args.trajfile, in_memory=True)
    else:
        u = mda.Universe(args.trajfile, in_memory=True)

    # if itp file is provided use it
    if args.itp_files:
        ff = vermouth.forcefield.ForceField("dummy")
        for file_handle in args.itp_files:
            with open(file_handle) as _file:
                lines = _file.readlines()
        read_itp(lines, ff)

        fitter = InteractionFitter(constraint_converter=args.constraint_convert,
                                   max_dihedrals=args.max_dihedral,
                                   temperature=args.temperature,
                                   precision=args.precision,
                                   dihedral_scaling=args.dihedral_scaling)
        # loop over molecules
        for molname, block in ff.blocks.items():
            # calculate distributions for interaction
            if not args.itp_only:
                guess_interactions(block)
            interaction_groups = itp_to_ag(block, molname, u)
            distributions = {"bonds": {}, "angles": {}, "dihedrals": {}}
            for inter_type in ['bonds', 'angles', 'dihedrals']:
                for group_name, pair_idxs in interaction_groups[inter_type].items():
                    distr = interaction_distribution(u, inter_type, pair_idxs, group_name,
                                                     args.prefix, args.distribution_data)

                    distributions[inter_type][group_name] = distr, pair_idxs

            # fit the interactions
            for inter_type in ['bonds', 'angles', 'dihedrals']:
                for group_name, (data, atoms) in distributions[inter_type].items():
                    fitter.fit_interaction(data, atoms, group_name, inter_type)

            # assign each interaction type directly into the block.
            # Need to do this way to ensure, e.g. bonds/constraints are written properly
            for inter_type, interactions in fitter.interactions_dict.items():
                block.interactions[inter_type] = interactions

            # make plots if we want to
            if args.plots:
                make_distribution_plot(fitter.plot_parameters,
                                       args.plot_data)

            # write out the itp
            itp_writer(molname,
                       ff.blocks[molname],
                       command_used=' '.join(sys.argv),
                       )

    # write out using DeferredFileWriter to back up any existing files of the same names
    DeferredFileWriter().write()

__main__()
